// email= is a REQUIRED field.  The server will be use this address
// to send you an e-mail when your client discovers a prime.
email=

// userid= is a REQUIRED field that will be used by the server
// to report on stats, etc. without having to reveal the user's
// e-mail address.
userid=

// This value differentiates machines for the same e-mail
machineid=

// This value differentiates instances on a machine
instanceid=

// Tests completed by this "team" will be rolled-up as part of team stats.  This
// will be recorded on tests that are pending and then updated when tests are
// completed.  Since it is stored on the server per test, it is possible for a
// single user to be a member of multiple teams.  If no value is specified for
// this field, then completed tests and primes will not be awarded to any teams.
// The teamid cannot have any embedded spaces.
teamid=

// server= configures the mix of work to perform across one or more
// servers.  It is parsed as follows:
//   <suffix>:<pct>:<workunits>:<server IP>:<port>
//
// <suffix>     - a unique suffix for the server.  This is used to distinguish
//                file names that are created for each configured server.
// <pct>        - the percentage of PRP tests to do from the server.
// <workunits>  - the number of PRP tests to get from the server.  The 
//                server also has a limit, so the server will never return
//                more than its limit.
// <server IP>  - the IP address or name for the server
// <port>       - the port of the PRPNet server, normally 7101
//
// Setting pct to 0 means that the client will only get work from the
// server if it cannot connect to one of the other configured servers.
// Please read the prpnet_servers.txt in this directory for information
// on some known PRPNet servers.
server=

// This is the name of LLR executable.  On Windows, this needs to be
// the LLR console application, not the GUI application.  The GUI 
// application does not terminate when the PRP test is done.
// On some systems you will need to put a "./" in front of the executable
// name so that it looks in the current directory for it rather than 
// in the system path.
// LLR can be downloaded from http://jpenne.free.fr/index2.html
llrexe=

// This is the name of Phrot executable.  
// On some systems you will need to put a "./" in front of the executable
// name so that it looks in the current directory for it rather than 
// in the system path.
// Phrot can be downloaded from http://home.roadrunner.com/~mrodenkirch/
phrotexe=

// This is the name of the PFGW executable.  On Windows, this needs to
// be the PFGW console application, not the GUI application.
// PFGW can be downloaded from http://sourceforge.net/projects/openpfgw/
pfgwexe=

// This is the name of the genefer executables used for GFN searches.  Up
// to four different Genefer programs can be specified.  The client will
// attempt a test with genefercude first.  If a round off error occurs it
// will try genefx64 then genefer and finally genefer80.  If genefer80 fails,
// then the number will be tested with PFGW or phrot
// Genefer can be downloaded from http://pgllr.mine.nu/software/genefer/
geneferexe=

// This is the name of the executable used for the PIES search.
// Cycle can be downloaded from http://yves.gallot.pagesperso-orange.fr/Cyclo/
cycloexe=

// This is the name of the executable used for Wieferich and Wall-Sun-Sun searches.
wwwwexe=

// This sets the CPU affinity for LLR on multi-CPU machines.  It defaults to
// -1, which means that LLR can run on an CPU.
cpuaffinity=

// This sets the GPU affinity for CUDA apps on multi-GPU machines.  It defaults to
// -1, which means that the CUDA app can run on an GPU.
gpuaffinity=

// Set to 1 to tell PFGW to run in NORMAL priority.  It defaults to 0, which means
// that PFGW will run in IDLE priority, the same priority used by LLR, phrot,
// and genefer.
normalpriority=0

// startoption= tells the client what to do when starting up and there is work that has
// not been completed and returned to the server.  The accepted values are:
//    0 - prompt 
//    1 - Return completed work units, abandon the rest, then get more work 
//    2 - Return completed work units, abandon the rest, then shut down
//    3 - Return completed, then continue
//    4 - Complete inprogress work units, abandon the rest, report them, then get more work 
//    5 - Complete inprogress work units, abandon the rest, report them, then shut down
//    6 - Complete all work units, report them, then shut down 
//    7 - Complete all work units then shut down (do not report completed work)
//    9 - Continue from where client left off when it was shut down
startoption=0

// stopoption= tells the client what to do when it is stopped with CTRL-C and there is
// work that has not been completed and returned to the server.  Options 2, 5, and 6 will
// return all workunits.  This will override stopasapoption.  The accepted values are:
//    0 - prompt
//    2 - Return completed work units, abandon the rest, then shut down
//    3 - Return completed work units (keep the rest), then shut down
//    5 - Complete inprogress work units, abandon the rest, report them, then shut down
//    6 - Complete all work units, report them, then shut down
//    7 - Complete all work units then shut down (do not report completed work)
//    9 - Do nothing and shut down (presumes you will restart with startoption=9)
stopoption=0

// stopasapoption= tells the client that it needs to be shutdown automatically, i.e. without
// a CTRL-C.  It is evaluated after each test is completed.  It should be 0 upon startup.
// The accepted values are:
//    0 - Continue processing work units
//    2 - Return completed work units and abandon the rest
//    3 - Return completed work units (keep the rest)
//    6 - Complete all work units and return them
//    7 - Complete all work units then shut down (do not report completed work)
stopasapoption=0

// Timeout on communications errors
// (default is 60 minutes, minimum is 1 minute if not specified here...)
// Note that the actual used in the client is anywhere from 90% to 110% of this value
errortimeout=10

// Size limit for the prpclient.log file...
// 0 means no limit.
// -1 means no log.
loglimit=1000000

// Set the debug level for the client
//    0 - no debug messages
//    1 - all debug messages
//    2 - output debug messages from socket communication 
//    3 - output debug messages from work selection
debuglevel=0

// Whether or not to echo "INFO" messages from server to console for accepted tests
//    0 - no echo
//    1 - echo (default)
echotest=1
